#![cfg(test)]

use super::*;
extern crate std;

use soroban_sdk::{testutils::Accounts, Env, Vec, Bytes,vec};

#[test]
fn test() {
    let env = Env::default();
    let contract_id = env.register_contract(None, MerkleProof);
    let client = MerkleProofClient::new(&env, &contract_id);

    let proof: Vec<Bytes> = vec!(&env, Bytes::from_array(&env, &[54, 101, 50, 51, 53, 50, 56, 102, 56, 52, 98, 99, 101, 53, 50, 53, 55, 48, 98, 55, 52, 101, 99, 53, 102, 49, 98, 55, 51, 102, 51, 100, 49, 54, 102, 57, 56, 53, 102, 57, 50, 53, 55, 56, 56, 53, 102, 98, 50, 55, 97, 51, 53, 100, 57, 99, 49, 52, 55, 52, 53, 50, 101, 50]),
                                       Bytes::from_array(&env, &[101, 51, 49, 52, 98, 52, 50, 50, 99, 97, 100, 99, 100, 101, 52, 54, 97, 50, 97, 56, 49, 57, 49, 56, 57, 99, 54, 100, 52, 48, 102, 54, 51, 98, 99, 55, 56, 101, 55, 55, 100, 55, 48, 54, 57, 48, 102, 50, 53, 97, 56, 48, 54, 100, 98, 100, 57, 49, 97, 57, 99, 54, 49, 50]),
                                       Bytes::from_array(&env, &[48, 99, 100, 102, 54, 98, 50, 101, 98, 56, 49, 50, 52, 50, 100, 56, 49, 56, 100, 51, 97, 50, 52, 101, 55, 49, 52, 57, 101, 100, 55, 98, 98, 57, 101, 48, 100, 55, 52, 49, 55, 54, 50, 100, 97, 53, 50, 97, 101, 53, 100, 101, 55, 102, 57, 56, 48, 55, 53, 97, 53, 102, 102, 57]),
                                       Bytes::from_array(&env, &[48, 54, 100, 53, 56, 52, 49, 97, 99, 100, 48, 49, 101, 57, 54, 50, 52, 56, 55, 50, 54, 100, 55, 100, 55, 49, 54, 102, 48, 98, 99, 102, 99, 50, 53, 52, 50, 57, 55, 50, 54, 99, 102, 55, 52, 50, 53, 102, 49, 51, 100, 101, 102, 54, 53, 54, 49, 57, 52, 102, 49, 56, 48, 57]),
                                       Bytes::from_array(&env, &[51, 54, 55, 97, 98, 98, 97, 49, 55, 54, 54, 102, 50, 53, 97, 57, 51, 49, 50, 97, 48, 99, 52, 100, 101, 97, 56, 56, 56, 97, 99, 56, 48, 100, 51, 100, 97, 57, 99, 101, 52, 57, 49, 102, 49, 98, 49, 53, 51, 55, 98, 52, 102, 100, 55, 55, 101, 97, 48, 52, 54, 99, 101, 55]),
                                       Bytes::from_array(&env, &[97, 55, 52, 54, 53, 99, 57, 101, 56, 100, 57, 98, 48, 50, 51, 50, 102, 49, 52, 53, 102, 50, 102, 48, 48, 51, 101, 50, 98, 56, 102, 49, 54, 55, 55, 100, 50, 100, 54, 53, 52, 48, 51, 102, 55, 99, 56, 97, 51, 51, 52, 54, 55, 52, 51, 53, 53, 52, 100, 48, 56, 51, 101, 101]),
                                );

    let root: Bytes = Bytes::from_array(&env, &[98, 100, 54, 49, 52, 53, 57, 97, 100, 97, 102, 53, 50, 56, 54, 55, 48, 99, 54, 50, 53, 100, 51, 49, 102, 102, 48, 51, 51, 102, 99, 102, 101, 54, 98, 55, 56, 57, 55, 102, 57, 99, 52, 56, 99, 55, 100, 55, 52, 52, 53, 48, 56, 51, 55, 53, 98, 101, 98, 49, 55, 49, 48, 51]);
    
    // Leaf generated from Account ID from the website, in our case merkletree_generator.rs solving that
    // Whitelisted
    let leaf_true: Bytes = Bytes::from_array(&env, &[54, 101, 50, 51, 53, 50, 56, 102, 56, 52, 98, 99, 101, 53, 50, 53, 55, 48, 98, 55, 52, 101, 99, 53, 102, 49, 98, 55, 51, 102, 51, 100, 49, 54, 102, 57, 56, 53, 102, 57, 50, 53, 55, 56, 56, 53, 102, 98, 50, 55, 97, 51, 53, 100, 57, 99, 49, 52, 55, 52, 53, 50, 101, 50]);
    // Not whitelisted
    let leaf_false: Bytes = Bytes::from_array(&env, &[55, 100, 49, 52, 53, 50, 56, 102, 56, 52, 98, 99, 101, 53, 50, 54, 55, 48, 98, 55, 52, 101, 99, 53, 102, 49, 98, 55, 51, 102, 51, 100, 49, 54, 102, 57, 56, 53, 102, 57, 50, 53, 55, 56, 56, 53, 102, 98, 50, 55, 97, 51, 53, 100, 57, 99, 49, 52, 55, 52, 53, 50, 101, 50]);

    let user = env.accounts().generate();

    assert_eq!(client.with_source_account(&user).verify(&proof,&root,&leaf_true), true);
    //assert_eq!(client.with_source_account(&user).verify(&proof,&root,&leaf_false), false);
}